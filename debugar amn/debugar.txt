const express = require('express');
const { MongoClient } = require('mongodb');
const bodyParser = require('body-parser');
const bcrypt = require('bcrypt'); 
const jwt = require('jsonwebtoken'); // Adicionei jwt aqui
const authenticateToken = require('./middleware/authMiddleware');
const cookieParser = require('cookie-parser'); 
require('dotenv').config();

const app = express();
const port = 3000;

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cookieParser());

app.use(express.static('public'));

const uri = process.env.MONGODB_URI || "mongodb+srv://admin:123senac@conecta.rqjpi.mongodb.net/?retryWrites=true&w=majority&appName=Conecta";

let db;
MongoClient.connect(uri)
    .then(client => {
        db = client.db('conectaDB');
        console.log('Conectado ao MongoDB Atlas');
    })
    .catch(error => console.error(error));

app.get('/login', (req, res) => {
    res.sendFile(__dirname + '/public/login.html');
});

app.post('/register', (req, res) => {
    if (!db) {
        return res.json({ success: false, message: 'Erro ao conectar ao banco de dados.' });
    }

    const { username, password } = req.body;

    bcrypt.hash(password, 10, (err, hashedPassword) => {
        if (err) {
            return res.json({ success: false, message: 'Erro ao processar a senha.' });
        }

        const collection = db.collection('users');
        collection.insertOne({ username, password: hashedPassword })
            .then(result => {
                res.json({ success: true, message: 'Usuário cadastrado com sucesso!' });
            })
            .catch(error => {
                res.json({ success: false, message: 'Erro ao cadastrar o usuário.' });
                console.error(error);
            });
    });
});

app.post('/login', (req, res) => {
    if (!db) {
        return res.json({ success: false, message: 'Erro ao conectar ao banco de dados.' });
    }

    const { username, password } = req.body;

    const collection = db.collection('users');
    collection.findOne({ username })
        .then(user => {
            if (!user) {
                return res.redirect('/login-error');
            }

            bcrypt.compare(password, user.password, (err, result) => {
                if (err) {
                    return res.json({ success: false, message: 'Erro ao comparar a senha.' });
                }

                if (result) {
                    const token = generateToken(user);
                    res.cookie('authToken', token, { httpOnly: true, secure: true, maxAge: 3600000 }); // 1 hora
                    res.redirect('/logado');
                } else {
                    res.redirect('/login-error');
                }
            });
        })
        .catch(error => {
            res.json({ success: false, message: 'Erro ao realizar login.' });
            console.error(error);
        });
});

function generateToken(user) {
    return jwt.sign({ username: user.username, id: user._id }, process.env.JWT_SECRET, {
        expiresIn: '1h',
    });
}

app.get('/logado', authenticateToken, (req, res) => {
    res.sendFile(__dirname + '/public/logado.html'); 
});

app.get('/login-error', (req, res) => {
    res.sendFile(__dirname + '/public/error.html');
});

app.listen(port, () => {
    console.log(`Servidor rodando em http://localhost:${port}`);
});
